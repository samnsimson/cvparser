// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

generator zod {
    provider                         = "zod-prisma-types"
    output                           = "../src/zod"
    useMultipleFiles                 = true
    createPartialTypes               = true
    writeNullishInModelTypes         = true
    createInputTypes                 = false
    createOptionalDefaultValuesTypes = true
    createRelationValuesTypes        = true
    addIncludeType                   = true
    addSelectType                    = true
}

model User {
    id            String        @id @default(uuid())
    name          String /// @zod.string.min(1)
    email         String        @unique /// @zod.string.email({message: "Email is invalid"})
    phone         String        @unique /// @zod.string.regex(new RegExp(/^\+?[1-9]\d{9,14}$/), "Phone number is invalid")
    password      String /// @zod.string.min(6).max(16)
    role          Role?         @default(USER)
    emailVerified Boolean?      @default(false)
    phoneVerified Boolean?      @default(false)
    profile       Profile?
    Job           Job[]
    Department    Department[]
    shortListed   ShortListed[]
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
}

model Profile {
    id        String   @id @default(uuid())
    firstName String /// @zod.string.min(3, {message: "Value cannot be empty"})
    lastName  String? /// @zod.string.min(3, {message: "Value cannot be empty"})
    address   String? /// @zod.string.min(3, {message: "Value cannot be empty"})
    city      String? /// @zod.string.min(3, {message: "Value cannot be empty"})
    state     String? /// @zod.string.min(3, {message: "Value cannot be empty"})
    country   String? /// @zod.string.min(3, {message: "Value cannot be empty"})
    zipCode   String? /// @zod.string.min(3, {message: "Value cannot be empty"})
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Job {
    id                    String             @id @default(uuid())
    title                 String /// @zod.string.min(1, {message: "Title cannot be empty"})
    description           String?
    jobType               JobType?           @default(FULL_TIME)
    department            Department         @relation(fields: [departmentId], references: [id], onDelete: Cascade)
    departmentId          String /// @zod.string.min(1, {message: "Department is required"}).uuid({message:"User ID is invalid"})
    location              String?
    shiftType             ShiftType?         @default(DAY)
    expiryDate            DateTime? /// @zod.date({invalid_type_error:"Date is invalid"})
    createdBy             User               @relation(fields: [createdById], references: [id])
    createdById           String /// @zod.string.min(1, {message: "User is required"}).uuid({message:"User ID is invalid"})
    resumes               JobsAndResumes[]
    candidates            CandidatesOnJobs[]
    shortListedCandidates ShortListed[]
    createdAt             DateTime           @default(now())
    udpatedAt             DateTime           @updatedAt
}

model Department {
    id          String   @id @default(uuid())
    title       String /// @zod.string.min(1, {message: "Title cannot be empty"})
    description String?
    isDeleted   Boolean  @default(false)
    Job         Job[]
    createdBy   User     @relation(fields: [createdById], references: [id])
    createdById String /// @zod.string.min(1, {message: "User is required"}).uuid({message:"User ID is invalid"})
    createdAt   DateTime @default(now())
    udpatedAt   DateTime @updatedAt
}

model Candidate {
    id                 String             @id @default(uuid())
    name               String /// @zod.string.min(1, {message:"Name cannot be empty"})
    email              String? /// @zod.string.email({message:"Email is invalid"})
    phone              String? /// @zod.string.regex(new RegExp(/^\+?[1-9]\d{9,14}$/), "Phone number is invalid")
    address            String? /// @zod.string.min(1, {message: "Address cannot be empty"})
    city               String? /// @zod.string.min(1, {message: "City cannot be empty"}) 
    state              String? /// @zod.string.min(1, {message: "State cannot be empty"})
    country            String? /// @zod.string.min(1, {message: "Country cannot be empty"})
    zipCode            String? /// @zod.string.min(1, {message: "Zip code cannot be empty"})
    age                Int? /// @zod.number.positive({message:"Age must be a valid number"})
    dob                DateTime? /// @zod.date({invalid_type_error:"Date is invalid"})
    gender             Gender?            @default(MALE)
    jobExperience      Json?
    totalExperience    Json?
    relevantExperience Json?
    skills             Json?
    pros               Json?
    cons               Json?
    score              Int? /// @zod.number.positive({message:"Score must be a valid number"})
    resume             Resume[]
    jobs               CandidatesOnJobs[]
    shortListedJobs    ShortListed[]
    activeResumeId     String?            @unique
    createdAt          DateTime           @default(now())
    updatedAt          DateTime           @updatedAt
    resumeId           String
}

model CandidatesOnJobs {
    id          String    @id @default(uuid())
    candidate   Candidate @relation(fields: [candidateId], references: [id])
    candidateId String
    job         Job       @relation(fields: [jobId], references: [id])
    jobId       String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    @@unique([id])
    @@unique([candidateId, jobId])
}

model ShortListed {
    id          String    @id @default(uuid())
    user        User      @relation(fields: [userId], references: [id])
    userId      String
    candidate   Candidate @relation(fields: [candidateId], references: [id])
    candidateId String
    job         Job       @relation(fields: [jobId], references: [id])
    jobId       String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    @@unique([id])
    @@unique([userId, jobId, candidateId])
}

model Resume {
    id          String           @id @default(uuid())
    fileKey     String /// @zod.string.uuid({message:"Key is invalid"})
    path        String? /// @zod.string
    fullPath    String? /// @zod.string
    url         String /// @zod.string.url({message:"URL is invalid"})
    candidate   Candidate?       @relation(fields: [candidateId], references: [id])
    candidateId String?
    jobs        JobsAndResumes[]
    createdAt   DateTime         @default(now())
    updatedAt   DateTime         @updatedAt
}

model JobsAndResumes {
    job      Job    @relation(fields: [jobId], references: [id])
    resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
    jobId    String
    resumeId String

    @@unique([jobId, resumeId])
}

enum Gender {
    MALE
    FEMALE
}

enum JobType {
    FULL_TIME
    PART_TIME
    HYBRID
    REMOTE
}

enum ShiftType {
    DAY
    NIGHT
    MIXED
}

enum Role {
    USER
    ADMIN
}
