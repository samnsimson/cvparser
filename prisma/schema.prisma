// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

generator zod {
    provider                         = "zod-prisma-types"
    output                           = "../src/zod"
    useMultipleFiles                 = true
    createPartialTypes               = true
    writeNullishInModelTypes         = true
    createInputTypes                 = false
    createOptionalDefaultValuesTypes = true
    createRelationValuesTypes        = true
    addIncludeType                   = true
    addSelectType                    = true
}

model User {
    id            String   @id @default(uuid())
    name          String /// @zod.string.min(1)
    email         String   @unique /// @zod.string.email({message: "Email is invalid"})
    phone         String   @unique /// @zod.string.regex(new RegExp(/^\+?[1-9]\d{9,14}$/), "Phone number is invalid")
    password      String /// @zod.string.min(6).max(16)
    role          Role?    @default(USER)
    emailVerified Boolean? @default(false)
    phoneVerified Boolean? @default(false)
    profile       Profile?
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
}

model Profile {
    id        String   @id @default(uuid())
    firstName String /// @zod.string.min(3, {message: "Value cannot be empty"})
    lastName  String? /// @zod.string.min(3, {message: "Value cannot be empty"})
    address   String? /// @zod.string.min(3, {message: "Value cannot be empty"})
    city      String? /// @zod.string.min(3, {message: "Value cannot be empty"})
    state     String? /// @zod.string.min(3, {message: "Value cannot be empty"})
    country   String? /// @zod.string.min(3, {message: "Value cannot be empty"})
    zipCode   String? /// @zod.string.min(3, {message: "Value cannot be empty"})
    user      User     @relation(fields: [userId], references: [id])
    userId    String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Job {
    id           String     @id @default(uuid())
    title        String /// @zod.string.min(1, {message: "Title cannot be empty"})
    description  String?
    jobType      JobType?   @default(FULL_TIME)
    department   Department @relation(fields: [departmentId], references: [id])
    departmentId String /// @zod.string.uuid({message:"Please select a department"})
    location     String?
    shiftType    ShiftType? @default(DAY)
    createdAt    DateTime   @default(now())
    udpatedAt    DateTime   @updatedAt
}

model Department {
    id          String   @id @default(uuid())
    title       String
    description String?
    isDeleted   Boolean  @default(false)
    Job         Job[]
    createdAt   DateTime @default(now())
    udpatedAt   DateTime @updatedAt
}

enum JobType {
    FULL_TIME
    PART_TIME
    FREELANCE
    REMOTE
}

enum ShiftType {
    DAY
    NIGHT
    MIXED
}

enum Role {
    USER
    ADMIN
}
